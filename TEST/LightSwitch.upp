#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "LightSwitch.generated.h"

::
#include "LightSwitch.h"
::

@ BlueprintType
struct SURREALPROJECT_API FLightConfiguration
{
    @ EditAnywhere, BlueprintReadWrite, Category="Light Configuration Variables"
    float
        InitialIntensity;

    float
        CurrentIntensity;

    @
    UObject*
        OwnerObject;
};

@
class SURREALPROJECT_API ALightSwitch :
    public AActor
{
    public:

    @ VisibleAnywhere, Category = "Switch Components"
    class UPointLightComponent*
        PointLightComponent;

    @ VisibleAnywhere, Category = "Switch Components"
    class USphereComponent*
        SphereComponent;

    ::ALightSwitch(
         )
    {
        PrimaryActorTick.bCanEverTick = true;
        
        DesiredIntensity = 3000.0f;

        PointLightComponent = CreateDefaultSubobject<UPointLightComponent>( TEXT( "PointLightComponent" ) );
        PointLightComponent->Intensity = DesiredIntensity;
        PointLightComponent->bVisible = true;
        RootComponent = PointLightComponent;

        SphereComponent = CreateDefaultSubobject<USphereComponent>( TEXT( "SphereComponent" ) );
        SphereComponent->InitSphereRadius( 250.0f );
        SphereComponent->SetupAttachment( RootComponent );

        SphereComponent->OnComponentBeginOverlap.AddDynamic( this, &ALightSwitch::OnOverlapBegin );
        SphereComponent->OnComponentEndOverlap.AddDynamic( this, &ALightSwitch::OnOverlapEnd );
    }

    virtual void ::BeginPlay(
        ) override
    {
        Super::BeginPlay();
    }

    virtual void ::Tick(
        float delta_time
        ) override
    {
        Super::Tick( delta_time );
    }

    @
    void ::OnOverlapBegin(
        class UPrimitiveComponent* overlapped_primitive_component,
        class AActor* other_actor,
        class UPrimitiveComponent* other_primitive_component,
        int32 other_body_index,
        bool is_from_sweep,
        const FHitResult& sweep_hit_result
        )
    {
        if ( other_actor && ( other_actor != this ) && other_primitive_component )
        {
            ToggleLight();
        }
    }

    @
    void ::OnOverlapEnd(
        class UPrimitiveComponent* overlapped_primitive_component = 0,
        class AActor* other_actor = 0,
        class UPrimitiveComponent* other_primitive_component = 0,
        int32 other_body_index = 0
        )
    {
        if ( other_actor && ( other_actor != this ) && other_primitive_component )
        {
            ToggleLight();
        }
    }

    @
    void ::ToggleLight(
        )
    {
        PointLightComponent->ToggleVisibility();
    }

    @ VisibleAnywhere, Category = "Switch Variables"
    float
        DesiredIntensity;
};
